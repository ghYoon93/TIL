package bruteForce;
/**
 * 
 * @author YGH
 * 테트로미노
 * 폴리오미노란 크기가 1×1인 정사각형을 여러 개 이어서 붙인 도형이며, 다음과 같은 조건을 만족해야 한다.
 * 정사각형은 서로 겹치면 안 된다.
 * 도형은 모두 연결되어 있어야 한다.
 * 정사각형의 변끼리 연결되어 있어야 한다. 
 * 즉, 꼭짓점과 꼭짓점만 맞닿아 있으면 안 된다.
 * 정사각형 4개를 이어 붙인 폴리오미노는 테트로미노라고 하며, 다음과 같은 5가지가 있다.
 * 아름이는 크기가 N×M인 종이 위에 테트로미노 하나를 놓으려고 한다. 
 * 종이는 1×1 크기의 칸으로 나누어져 있으며, 
 * 각각의 칸에는 정수가 하나 쓰여 있다.
 * 테트로미노 하나를 적절히 놓아서 테트로미노가 놓인 칸에 쓰여 있는 수들의 합을 최대로 하는 프로그램을 작성하시오.
 * 테트로미노는 반드시 한 정사각형이 정확히 하나의 칸을 포함하도록 놓아야 하며, 회전이나 대칭을 시켜도 된다.
 * 첫째 줄에 종이의 세로 크기 N과 가로 크기 M이 주어진다. (4 ≤ N, M ≤ 500)
 * 둘째 줄부터 N개의 줄에 종이에 쓰여 있는 수가 주어진다. 
 * i번째 줄의 j번째 수는 위에서부터 i번째 칸, 왼쪽에서부터 j번째 칸에 쓰여 있는 수이다. 
 * 입력으로 주어지는 수는 1,000을 넘지 않는 자연수이다.
 * 첫째 줄에 테트로미노가 놓인 칸에 쓰인 수들의 합의 최댓값을 출력한다.
 * 
 */
import java.util.*;
public class No14500_BruteForce {
	static int[][][] poly = {
			{{0, 1}, {0, 2}, {0, 3}}, // 1. 1-1
			{{1, 0}, {2, 0}, {3, 0}}, // 2. 1-2
			{{0, 1}, {1, 0}, {1, 1}}, // 3. 2-1
			{{1, 0}, {2, 0}, {2, 1}}, // 4. 3-1
			{{0, -1}, {0, -2}, {1, -2}}, // 5. 3-2
			{{-1, 0}, {-2, 0}, {-2, -1}}, // 6. 3-3
			{{0, 1}, {0, 2}, {-1, 2}}, // 7. 3-4
			{{1, 0}, {2, 0}, {2, -1}}, // 8. 3-5
			{{0, -1}, {0, -2}, {-1, -2}}, // 9. 3-6
			{{-1, 0}, {-2, 0}, {-2, 1}}, // 10. 3-7
			{{0, 1}, {0, 2}, {1, 2}}, // 11. 3-8
			{{1, 0}, {1, 1}, {2, 1}}, // 12. 4-1
			{{0, -1}, {1, -1}, {1, -2}}, // 13. 4-2
			{{1, 0}, {1, -1}, {2, -1}}, // 14. 4-3
			{{0, -1}, {-1, -1}, {-1, -2}}, // 15. 4-4
			{{0, 1}, {0, 2}, {1, 1}}, // 16. 5-1
			{{1, 0}, {2, 0}, {1, -1}}, // 17. 5-2
			{{0, -1}, {0, -2}, {-1, -1}}, // 18. 5-3
			{{-1, 0}, {-2, 0}, {-1, 1}} //19. 5-4
	};
    public static void main(String[] args) {
    	Scanner sc = new Scanner(System.in);
    	int n = sc.nextInt();
    	int m = sc.nextInt();
    	int[][] map = new int[n][m];
    	for(int i = 0; i < n; i++) {
    		for(int j = 0; j < m; j++) {
    			map[i][j] = sc.nextInt();
    		}
    	}
    	int ans = 0;
    	for(int i = 0; i < n; i++) {
    		for(int j = 0; j < m; j++) {
    			for(int k = 0; k < 19; k++) {
    			    int sum = map[i][j];
    				boolean ok = true;
    				for(int l = 0; l < 3; l++) {
    					int x = i + poly[k][l][0];
    					int y = j + poly[k][l][1];
    					if(x < 0 || x >= n || y < 0 || y >=m) {
    						ok = false;
    						break;
    					}
    					sum += map[x][y];
    				}
    				if(ok) {
    					if(sum > ans) {
    						ans = sum;
    					}
    				}
    			}
    		}
    	}
    	System.out.println(ans);
    }
}
